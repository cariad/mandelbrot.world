AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  Image:
    Type: String

Resources:
  ScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: ScaleForDemand
      PolicyType: TargetTrackingScaling
      ScalingTargetId:
        Ref: ScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        TargetValue: 80

  ScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 20
      MinCapacity: 4
      ResourceId:
        Fn::Sub:
          - service/${Cluster}/${ServiceName}
          - ServiceName:
              Fn::GetAtt:
                - Service
                - Name
      RoleARN:
        Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - mandelbrot.world
          - www.mandelbrot.world
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachePolicyId: 4cc15a8a-d715-48a4-82b8-cc0b614638fe  # UseOriginCacheControlHeaders-QueryStrings
          TargetOriginId: ServiceTarget
          ViewerProtocolPolicy: redirect-to-https
        Enabled: true
        HttpVersion: http2and3
        IPV6Enabled: true
        Origins:
          - CustomOriginConfig:
              HTTPPort: 80
              OriginProtocolPolicy: http-only
            DomainName:
              Fn::GetAtt:
                - LoadBalancer
                - DNSName
            Id: ServiceTarget
        PriceClass: PriceClass_All
        ViewerCertificate:
          AcmCertificateArn: arn:aws:acm:us-east-1:807041577214:certificate/c5aac026-407d-4f61-841c-4602fd304371
          MinimumProtocolVersion: TLSv1.2_2021
          SslSupportMethod: sni-only

  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      CapacityProviders:
        - FARGATE

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value:
            Ref: AWS::StackName

  RouteToInternetGateway:
    DependsOn:
      - VpcInternetGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
      RouteTableId:
        Ref: RouteTable

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value:
            Ref: AWS::StackName
      VpcId:
        Ref: Vpc

  AllowContainerPortFromVpc:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription:
        Fn::Sub: Allow port 8080 from within the ${AWS::StackName} VPC
      SecurityGroupIngress:
        - CidrIp:
            Fn::GetAtt:
              - SubnetA
              - CidrBlock
          FromPort: 8080
          IpProtocol: tcp
          ToPort: 8080
        - CidrIp:
            Fn::GetAtt:
              - SubnetB
              - CidrBlock
          FromPort: 8080
          IpProtocol: tcp
          ToPort: 8080
      VpcId:
        Ref: Vpc

  AllowHttpFromAnywhere:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP from anywhere
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      VpcId:
        Ref: Vpc

  AllowHttpsFromVpc:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription:
        Fn::Sub: Allow HTTPS from within the ${AWS::StackName} VPC
      SecurityGroupIngress:
        - CidrIp:
            Fn::GetAtt:
              - SubnetA
              - CidrBlock
          Description: Subnet A
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
        - CidrIp:
            Fn::GetAtt:
              - SubnetB
              - CidrBlock
          Description: Subnet B
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
      VpcId:
        Ref: Vpc

  SubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Sub: ${AWS::Region}a
      CidrBlock: 10.0.0.0/24
      Tags:
        - Key: Name
          Value:
            Fn::Sub: ${AWS::StackName} A
      VpcId:
        Ref: Vpc

  SubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Sub: ${AWS::Region}b
      CidrBlock: 10.0.1.0/24
      Tags:
        - Key: Name
          Value:
            Fn::Sub: ${AWS::StackName} B
      VpcId:
        Ref: Vpc

  AssociateRouteTableWithSubnetA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: RouteTable
      SubnetId:
        Ref: SubnetA

  AssociateRouteTableWithSubnetB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: RouteTable
      SubnetId:
        Ref: SubnetB

  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      # The ECR endpoint requires DNS hostnames.
      EnableDnsHostnames: true
      # VPC endpoints require DNS support.
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value:
            Ref: AWS::StackName

  CloudWatchInterfaceEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      DnsOptions:
        DnsRecordIpType: ipv4
      IpAddressType: ipv4
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - Ref: AllowHttpsFromVpc
      ServiceName:
        Fn::Sub: com.amazonaws.${AWS::Region}.logs
      SubnetIds:
        - Ref: SubnetA
        - Ref: SubnetB
      Tags:
        - Key: Name
          Value:
            Fn::Sub: ${AWS::StackName} CloudWatch Logs
      VpcEndpointType: Interface
      VpcId:
        Ref: Vpc

  EcrApiInterfaceEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      DnsOptions:
        DnsRecordIpType: ipv4
      IpAddressType: ipv4
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - Ref: AllowHttpsFromVpc
      ServiceName:
        Fn::Sub: com.amazonaws.${AWS::Region}.ecr.api
      SubnetIds:
        - Ref: SubnetA
        - Ref: SubnetB
      Tags:
        - Key: Name
          Value:
            Fn::Sub: ${AWS::StackName} ECR API
      VpcEndpointType: Interface
      VpcId:
        Ref: Vpc

  EcrDockerInterfaceEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      DnsOptions:
        DnsRecordIpType: ipv4
      IpAddressType: ipv4
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - Ref: AllowHttpsFromVpc
      ServiceName:
        Fn::Sub: com.amazonaws.${AWS::Region}.ecr.dkr
      SubnetIds:
        - Ref: SubnetA
        - Ref: SubnetB
      Tags:
        - Key: Name
          Value:
            Fn::Sub: ${AWS::StackName} ECR Docker
      VpcEndpointType: Interface
      VpcId:
        Ref: Vpc

  S3GatewayEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      RouteTableIds:
        - Ref: RouteTable
      ServiceName:
        Fn::Sub: com.amazonaws.${AWS::Region}.s3
      Tags:
        - Key: Name
          Value:
            Fn::Sub: ${AWS::StackName} S3
      VpcEndpointType: Gateway
      VpcId:
        Ref: Vpc

  VpcInternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId:
        Ref: InternetGateway
      VpcId:
        Ref: Vpc

  Service:
    Type: AWS::ECS::Service
    DependsOn:
      - LoadBalancerHttpListener
    Properties:
      Cluster:
        Fn::GetAtt:
          - Cluster
          - Arn
      DesiredCount: 4
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: Server
          ContainerPort: 8080
          TargetGroupArn:
            Ref: TargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - Ref: AllowContainerPortFromVpc
          Subnets:
            - Ref: SubnetA
            - Ref: SubnetB
      TaskDefinition:
        Ref: TaskDefinition

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Environment:
            - Name: MW_THREAD_COUNT
              Value: 6
          Essential: true
          HealthCheck:
            Command:
              - CMD-SHELL
              - curl --fail http://0.0.0.0:8080/ || exit 1
            Interval: 10
            Retries: 3
          Image:
            Ref: Image
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region:
                Ref: AWS::Region
              awslogs-group:
                Ref: TaskLogGroup
              awslogs-stream-prefix: node
              mode: non-blocking
          Name: Server
          PortMappings:
            - ContainerPort: 8080
      # Cpu: 16384
      Cpu: 8192
      ExecutionRoleArn:
        Fn::GetAtt:
          - TaskExecutor
          - Arn
      # Memory: 32768
      Memory: 16384
      NetworkMode: awsvpc
      RuntimePlatform:
        CpuArchitecture: ARM64

  LoadBalancerHttpListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn:
            Ref: TargetGroup
          Type: forward
      LoadBalancerArn:
        Ref: LoadBalancer
      Port: 80
      Protocol: HTTP

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      SecurityGroups:
        - Ref: AllowHttpFromAnywhere
      Subnets:
        - Ref: SubnetA
        - Ref: SubnetB

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthyThresholdCount: 2
      Port: 8080
      Protocol: HTTP
      TargetType: ip
      VpcId:
        Ref: Vpc

  TaskExecutor:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
            Condition:
              ArnLike:
                aws:SourceArn:
                  Fn::Sub: arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:*
              StringEquals:
                aws:SourceAccount:
                  Ref: AWS::AccountId
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  TaskLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 3
